#!/usr/bin/env python
# Li Xue
# 14-Jul-2022 09:47
#
"""
Rename chain IDs of a pdb file according to the ref.pdb

Usage:
    python pdb_rename_chain.py <pdb file> <chainID map file> <output FL>
Example:
    python pdb_rename_chain.py example/model1.pdb example/model1.chnMap example/model1_newChn.pdb

INPUT (chain.map file. the third column is optional. Can be generated by match_chains.py):
    ref, model.pdb, score
    A, M, 98.56
    C, N, 100.0
OUTPUT:
   a pdb file with new chain IDs

"""

import sys
import re
import os
from os.path import dirname
from pathlib import Path
from myfun import *
import subprocess

def check_input(args):
    if len(args)!= 4:
        sys.stderr.write(__doc__)
        sys.exit(1)


def readMapFL(mapFL):
    # mapFL (the third column is optional):
    #     ref, modelpdb, score
    #     A, M, 98.56
    #     C, N, 100.0

    chnMap = {} #chnMap{ref_chn}= model_chn
    f = open(mapFL, 'r')
    next(f) #skip the header line: "ref, modelpdb, score"
    for line in f:
        line = re.sub('[\s\t]','', line)
        tmp = re.split(',', line)
        ref_chnID = tmp[0]
        model_chnID = tmp[1]
        chnMap[model_chnID] = ref_chnID
    f.close()
    return chnMap

def rm(files):
    for fl in files: os.remove(fl)

def rename_chain(pdbFL, mapFL, final_pdbFL):
    #chnMap[model_chnID]= ref_chnID

    # 0. read the chain map file
    chnMap = readMapFL(mapFL)

    # 1. split into individual chains
    path = os.path.dirname(sys.argv[0])
    subprocess.check_call(f"{path}/pdb_splitchain.py {pdbFL}", shell=True)

    # 2. rename chain ID for each individual chain file
    modelPDBFLs_newChn =[] #individual chain pdb files
    dir = dirname(os.path.abspath(pdbFL))
    basename = Path(pdbFL).stem

    for model_chnID in chnMap.keys():
        ref_chnID = chnMap[model_chnID]
        pdbFL_oldChn  = f"{dir}/{basename}_{model_chnID}.pdb"
        pdbFL_newChn = f"{dir}/{basename}_{model_chnID}.newChn.pdb"
        subprocess.check_call(f"pdb_chain -{ref_chnID} {pdbFL_oldChn} > {pdbFL_newChn}", shell=True)
        modelPDBFLs_newChn.append(pdbFL_newChn)
        os.remove(pdbFL_oldChn)

    # 3. combine chains into one pdb
    cat('  '.join(modelPDBFLs_newChn), final_pdbFL)
    print(f"{final_pdbFL} generated")

    # 4. clean up
    rm(modelPDBFLs_newChn)


check_input(sys.argv)
pdbFL = sys.argv[1]
mapFL = sys.argv[2]
outFL = sys.argv[3]
rename_chain(pdbFL, mapFL, outFL)
